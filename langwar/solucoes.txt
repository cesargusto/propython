
#!/usr/bin/perl

# Perl 5
# implementado por Rodrigo Siqueira

open(FILE,'massa.txt');        # Abre o arquivo
while(<FILE>) {                # Le cada linha
  my ($ext) = (/\.(\S+)\s*$/); # Pega extensão
  $dic_ext{$ext}++ if $ext;    # Salva no hash %dic_ext
}
close FILE;                    # Fecha o arquivo

# Ordena dados e imprime relatório
foreach my $ext (sort {$dic_ext{$b}<=>$dic_ext{$a}} (keys %dic_ext)) {
  print "$ext=$dic_ext{$ext}\n";
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#!/usr/bin/perl

# Perl 5
# implementado por André Uratsuka Manoel

my @linhas;
my %contador;

while (defined($_=<>)) {
	$fname = (split(/\s+/))[8];
	if ($fname =~ /\.([^.])$/) {
		$contador{$1}++;
	} else {
		$contador{"<sem extensao>"}++;
	}
}

for $i (sort { $contador{$a} <=> $contador{$b}} keys %contador) {
	printf "%d %s\n", $contador{$i}, $i
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


#!/usr/bin/perl

# Perl 5
# implementado por Mauricio Sadicoff 

$file = '<path-to-file>';        # Find the file to read data from
open(DIRLIST, $file);        # Open the file for reading
@lines = <INFO>;        # Read it into an array

foreach $line (@lines)   {           #go through each line
($null, $extension) = split ('.', $line);   #get the extension
if defined ($output{$extension})   { #the extension is already there
        $output{$extension} = $output{$extension} + 1; #can I use ++?
} else {                              #extension is not there yet
        $output{$extension} = 1;
}
}
close(INFO);            # Close the file
@ListOfValues = sort(values(%output)); #sort the values
#now print the result, sorted
foreach ($value) in @ListOfValues {
    foreach ($k, $v) in $output {
        if ($v eq $value) print ($v $k);
    } 
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

"Smalltalk (Squeak 3.0)
 implementado por LR"

| arq relatorio ext |
"ler arquivo e contar extensões"
relatorio := Bag new.
arq := FileStream readOnlyFileNamed: '\massa.txt'.
[arq atEnd] whileFalse: [
    ext := (arq nextLine findTokens: $.) last.
    relatorio add: ext].
arq close.
"montar relatório"
relatorio sortedCounts do: [:par |
    Transcript show: par key asString; tab; 
    show: par value asString; cr].
    
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-- Transcript (linguagem do Revolution, clone do Hypercard)
-- implementado por LR

on mouseUp
  -- ler texto e contar extensões
  put URL "file:/massa.txt" into linhas
  repeat for each line linha in linhas
    split linha by "."
    put linha[2] into ext --TODO: como obter o último pedaço?
    if it is in the keys of dic_ext then
      put 1 into dic_ext[ext]
    else
      add 1 to dic_ext[ext]
    end if
  end repeat
  -- montar relatório
  repeat for each line ext in the keys of dic_ext
    put dic_ext[ext] & tab & ext & cr after relatorio
  end repeat
  sort lines of relatorio descending numeric by word 1 of each
  put relatorio into field saida
end mouseUp

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-- Lingo (Macromedia Director X.0)
-- implementado por Luiz Dias

the itemDelimiter = "."
lista=[:]
filextra=new(xtra "FileIO")
filextra.openFile(the moviepath & "arquivo.txt",1)
txtData=filextra.readFile()
repeat with i=2 to txtData.item.count
  extensao=txtData.item[i].char[1..3]
  if lista.findpos(extensao)>0 then
    lista[extensao]=lista[extensao]+1
  else
    lista.addProp(extensao,1)
  end if
end repeat
lista2=[]
repeat with i=1 to lista.count
  lista2[i]=lista[i]&" "&lista.getPropAt(i)
end repeat
lista2.sort()
repeat with i=lista2.count() down to 1
  put lista2[i]
end repeat

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

# Python 2.X 
# implementado por LR

# ler texto e contar extensões
linhas = open('massa.txt').readlines()
dic_ext = {}
for linha in linhas:
    ext = linha.split('.')[-1] #ultimo pedaço
    ext = ext.strip() #remover newline do final
    dic_ext[ext] = dic_ext.get(ext,0) + 1

# montar relatório
rel = dic_ext.items()
rel = [ (qtd, ext) for (ext, qtd) in rel ]
rel.sort()
rel.reverse()
for item in rel:
    print '%3d %s' % item     
    
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

(****
   Delphi/Pascal 
   implementado por Arthur Heinrich
 ****)

program pascal2;
{$APPTYPE CONSOLE}
uses
  Classes, SysUtils;

const
  NomeArquivo : String = '';

var
  Lista : TStringList;
  Arquivo : TextFile;
  Linha, Extensao : String;
  Idx : Integer;

function RemoverExtensao(Linha : String):String;
var
  I : Integer;
begin
  I:=Length(Linha);
  while (I>0) and (Linha[I]<>'.') do Dec(I);
  if (I > 0) then
    Result:=Copy(Linha,Succ(I),Length(Linha)-I)
  else
    Result:='<sem extensao>';
end;

function SortByQtde(List: TStringList; Index1, Index2: Integer): Integer;
begin
  Result:=Integer(List.Objects[Index2])-Integer(List.Objects[Index1]);
  if (Result <> 0) then Result:=Result div Abs(Result);
end;

begin
  Lista := TStringList.Create;
  if (ParamCount = 1) then NomeArquivo:=ParamStr(1);
  AssignFile(Arquivo, NomeArquivo);
  Reset(Arquivo);
  while (not EOF(Arquivo)) do
    begin
      ReadLn(Arquivo, Linha);
      Extensao:=RemoverExtensao(Linha);
      Idx:=Lista.IndexOf(Extensao);
      if (Idx >= 0) then
        Lista.Objects[Idx]:=TObject(Succ(Integer(Lista.Objects[Idx])))
      else
        Lista.AddObject(Extensao, TObject(Integer(1)));
    end;
  CloseFile(Arquivo);
  Lista.CustomSort(SortByQtde);
  WriteLn('Qtde. Extensao');
  WriteLn('----- --------');
  for Idx:=0 to Pred(Lista.Count) do
    WriteLn(Integer(Lista.Objects[Idx]):5,' ',Lista[Idx]);
end.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

import java.io.*;
import java.util.*;

/* Java 2 - implementado por Oswaldo Bueno */

public class LW implements Comparator{
    public static void main(String[] args) {
        LW lw = new LW();
        lw.somaExtensoes(args[0]);
    }

    public void somaExtensoes(String arq) {
        try {
            BufferedReader reader = new BufferedReader(new FileReader(arq));
            String linha;
            HashMap dict = new HashMap();
            while ((linha = reader.readLine()) != null) {
                String ext = linha.substring(linha.lastIndexOf('.')+1,linha.length());
                Integer i = (Integer)dict.get(ext);
                if (i == null) i = new Integer(0);
                dict.put(ext,new Integer(i.intValue() + 1));
            }

            TreeSet ts = new TreeSet(this);
            ts.addAll(dict.entrySet());
            Iterator it = ts.iterator();
            while (it.hasNext()) {
                Map.Entry me = (Map.Entry)it.next();
                System.out.println(me.getKey() + " - " + me.getValue());
            }
        } catch (Exception e) {
            System.out.println("Exception e: " + e);
            e.printStackTrace();
        }
    }

    public int compare (Object o1, Object o2) {
        int i1 = ((Integer)((Map.Entry)o1).getValue()).intValue();
        int i2 = ((Integer)((Map.Entry)o2).getValue()).intValue();
        return i2 - i1;
    }

}    

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

# C com GLib - implementado por André Uratsuka Manoel
# http://developer.gnome.org/doc/API/glib/

#include <stdio.h>
#include <glib.h>

#define BUFSIZE 1024

void imprime_contador(gpointer key, gpointer value, gpointer user_data)
{
     printf("%s: %d\n", key, *(int *)value);
}

int main(int argc, char **argv)
{
	gchar buf[BUFSIZE];
	GHashTable *h;
	GMemChunk *memchunk;

	h = g_hash_table_new(g_str_hash, g_str_equal);
	memchunk = g_mem_chunk_new("int_arena", sizeof(guint), 512, G_ALLOC_ONLY);

	while (fgets(buf, BUFSIZE, stdin)) {
	     gchar *ptr;
	     guint *cntr;
	     gchar *sptr;

	     for (ptr = sptr = buf; *sptr; sptr++) {
		  if (*sptr == '.' || *sptr == '/') {
		       ptr = sptr;
		  }
	     }

	     if (*ptr=='.') {
		  gchar *crlf;

		  for (crlf=ptr;*crlf!='\r' && *crlf!='\n' && *crlf!=0; crlf++);
		  *crlf = 0;

		  ptr++;
	     }
	     else {
		  ptr=buf;
		  strncpy(ptr, "<sem extensao>", BUFSIZE);
	     
	     }
	     if (cntr = g_hash_table_lookup(h, buf)) {
		  *cntr++;
	     } else {
		  gchar *key;

		  cntr = g_mem_chunk_alloc(memchunk);
		  *cntr = 1;
		  key = g_strdup(ptr);
		  g_hash_table_insert(h, key, cntr);
	     }
	}
	g_hash_table_foreach(h, imprime_contador, NULL);
	
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

       IDENTIFICATION DIVISION.
       PROGRAM-ID.    LANGWAR-COBOL.
       AUTHOR.        FABIANO WEIMAR DOS SANTOS.

       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
            SELECT ARQ
            ASSIGN       TO "ls.txt" 
            ORGANIZATION IS LINE SEQUENTIAL
            ACCESS MODE  IS SEQUENTIAL
            FILE STATUS  IS FS.

       DATA DIVISION.
       FILE SECTION.
       FD    ARQ
             LABEL RECORD IS STANDARD.
       01    REG-ARQ.
         03  FILLER                    PIC X(54).
         03  ARQUIVO1                  PIC X(20).
         03  ARQUIVO2 REDEFINES ARQUIVO1.
          05 LETRA                     PIC X(01) OCCURS 20 TIMES.

       WORKING-STORAGE SECTION.
       01    FS		               PIC 9(02).
       01    EXT-QTD.
        03   EXT                       PIC X(20) OCCURS 150 TIMES.
        03   QTD                       PIC 9(03) OCCURS 150 TIMES.
       01    BUFFER1                   PIC X(20).
       01    BUFFER2 REDEFINES BUFFER1.
        03   P1                        PIC X(01).
        03   P2-20                     PIC X(19).
       01    BUFFER3                   PIC X(20).
       77    POS-PONTO                 PIC 9(02).
       77    POS-FINAL                 PIC 9(02).
       77    QTDE-EXTENSOES            PIC 9(03).
       77    IND1                      PIC 9(03).
       77    IND2                      PIC 9(03).
       77    EXT-AUX                   PIC X(20).
       77    QTD-AUX                   PIC 9(03).

       PROCEDURE DIVISION.
       MAIN SECTION.
           OPEN INPUT ARQ.
           IF FS > 0
	     DISPLAY "Erro de Abertura: " FS
	     STOP RUN.
           MOVE  ZEROS                  TO  QTDE-EXTENSOES.
           PERFORM P100-INICIALIZA     THRU P199-FIM.
       LE-ARQUIVO.
	   READ ARQ AT END GO TO FIM. 
	   PERFORM P000-PROCESSA       THRU P099-FIM.
           GO TO LE-ARQUIVO.
       FIM.
	   PERFORM P300-ORDENA-LISTA   THRU P399-FIM.
	   PERFORM P400-LISTA          THRU P499-FIM.
	   CLOSE ARQ.
	   STOP RUN.

       P000-PROCESSA.
           MOVE  ZEROS                 TO  POS-PONTO POS-FINAL.
           MOVE  20                    TO  IND1.
       P010-PROCURA-FINAL.
           IF LETRA( IND1 ) NOT EQUAL SPACES
              MOVE  IND1               TO  POS-FINAL
              GO TO P020-PROCURA-PONTO.
           SUBTRACT 1                 FROM IND1.
           GO TO P010-PROCURA-FINAL.
       P020-PROCURA-PONTO.
           SUBTRACT 1                 FROM IND1.
           IF LETRA( IND1 ) EQUAL "."
              COMPUTE POS-PONTO = IND1 + 1
              GO TO P030-EXTENSAO.
           GO TO P020-PROCURA-PONTO.
       P030-EXTENSAO.
           MOVE  SPACES                TO  BUFFER1.
           MOVE  POS-FINAL             TO  IND1.
       P035-MONTA-EXTENSAO.
           MOVE  BUFFER1               TO  BUFFER3.
           MOVE  LETRA( IND1 )         TO  P1.
           MOVE  BUFFER3               TO  P2-20.
           SUBTRACT 1                 FROM IND1.
           IF IND1 < POS-PONTO
              GO TO P040-PROCESSA.
           GO TO P035-MONTA-EXTENSAO.
       P040-PROCESSA.           
           PERFORM P200-INCLUI-LISTA  THRU P299-FIM.
       P099-FIM.
           EXIT.

       P100-INICIALIZA.
           MOVE  ZEROS                 TO  IND1.
       P110-EXTENSAO.
           ADD   1                     TO  IND1.
           IF IND1 > 150
              GO TO P199-FIM.
           MOVE  SPACES                TO  EXT ( IND1 ).
           MOVE  ZEROS                 TO  QTD ( IND1 ).
           GO TO P110-EXTENSAO.
       P199-FIM.
           EXIT.

       P200-INCLUI-LISTA.
           MOVE  ZEROS                 TO  IND1.
       P210-LOOPING.
           ADD   1                     TO  IND1.
           IF IND1 > 150
              DISPLAY "Erro. Vetor Muito Pequeno."
              STOP RUN.
           IF IND1 > QTDE-EXTENSOES
              MOVE  IND1               TO  QTDE-EXTENSOES
              MOVE  BUFFER1            TO  EXT( IND1 )
              MOVE  1                  TO  QTD( IND1 )
              GO TO P299-FIM.
           IF EXT( IND1 ) = BUFFER1
              ADD   1                  TO  QTD( IND1 )
              GO TO P299-FIM.
           GO TO P210-LOOPING.
       P299-FIM.
           EXIT.

       P300-ORDENA-LISTA.
           MOVE  ZEROS                 TO  IND1.
       P310-LACO1.
           ADD   1                     TO  IND1. 
           IF IND1 > QTDE-EXTENSOES
              GO TO P399-FIM.
           MOVE  IND1                  TO  IND2.
       P320-LACO2.
           ADD   1                     TO  IND2.
           IF IND2 > QTDE-EXTENSOES
              GO TO P310-LACO1.
           IF QTD( IND2 ) > QTD( IND1 )
              MOVE  EXT( IND2 )        TO  EXT-AUX
              MOVE  QTD( IND2 )        TO  QTD-AUX
              MOVE  EXT( IND1 )        TO  EXT( IND2 )
              MOVE  QTD( IND1 )        TO  QTD( IND2 )
              MOVE  EXT-AUX            TO  EXT( IND1 )
              MOVE  QTD-AUX            TO  QTD( IND1 ).
           GO TO P320-LACO2.
       P399-FIM.
           EXIT.

       P400-LISTA.
           MOVE  ZEROS                 TO  IND1.
       P410-LOOPING.
           ADD   1                     TO  IND1.
           IF IND1 > QTDE-EXTENSOES
              GO TO P499-FIM.
           DISPLAY QTD( IND1 ) " " EXT( IND1 ).
           GO TO P410-LOOPING.
       P499-FIM.
           EXIT.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
